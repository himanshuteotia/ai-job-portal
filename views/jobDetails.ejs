<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= job.companyName %> - Job Details</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.8/purify.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #e8f5e9; /* Light green background */
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .job-header {
            background-color: #4caf50; /* Green header */
            color: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .job-content {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }
        .main-content, .right-panel {
            flex: 1;
            min-width: 300px;
        }
        .job-section {
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border: 1px solid #81c784; /* Light green border */
        }
        .tech-tag {
            display: inline-block;
            background-color: #c8e6c9; /* Light green background */
            color: #2e7d32; /* Dark green text */
            padding: 5px 10px;
            border-radius: 20px;
            margin-right: 10px;
            margin-bottom: 10px;
            font-size: 0.9em;
        }
        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            transition: background-color 0.3s;
        }
        .btn-primary {
            background-color: #4caf50; /* Green primary button */
            color: #fff;
        }
        .btn-primary:hover {
            background-color: #45a049; /* Darker green on hover */
        }
        .btn-secondary {
            background-color: #81c784; /* Light green secondary button */
            color: #fff;
        }
        .btn-secondary:hover {
            background-color: #66bb6a; /* Slightly darker green on hover */
        }
        .btn-danger {
            background-color: #e57373; /* Light red button */
            color: #fff;
        }
        .btn-danger:hover {
            background-color: #ef5350; /* Slightly darker red on hover */
        }
        .status-badge {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: bold;
        }
        .applied { background-color: #fff176; color: #000; } /* Yellow */
        .interviewing { background-color: #4fc3f7; color: #000; } /* Light Blue */
        .offered { background-color: #81c784; color: #000; } /* Light Green */
        .rejected { background-color: #e57373; color: #fff; } /* Light Red */
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
        }
        
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        
        .note-chip {
            display: inline-block;
            padding: 5px 10px;
            margin: 5px;
            background-color: #c8e6c9; /* Light green background */
            color: #2e7d32; /* Dark green text */
            border-radius: 20px;
            font-size: 0.9em;
            position: relative;
            padding-right: 30px;
            max-width: none; /* Remove max-width */
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .unlink-note {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            font-weight: bold;
            color: #888;
            font-size: 1.2em;
            line-height: 1;
            width: 20px;
            height: 20px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background-color: rgba(0,0,0,0.1);
            transition: all 0.2s ease;
        }
        
        .unlink-note:hover {
            color: #fff;
            background-color: #ef5350; /* Slightly darker red on hover */
        }
        
        .full-width-section {
            flex-basis: 100%;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="/jobs" class="btn btn-secondary"><i class="fas fa-arrow-left"></i> Back to Jobs</a>
        
        <div class="job-header">
            <h1><%= job.companyName %></h1>
            <div class="job-meta">
                <span class="job-meta-item"><i class="fas fa-calendar-alt"></i> Applied: <%= job.dateApplied.toLocaleDateString() %></span>
                <span class="job-meta-item"><i class="fas fa-briefcase"></i> Experience: <%= job.experienceRequired %> years</span>
                <span class="job-meta-item"><i class="fas fa-tasks"></i> Status: <span class="status-badge <%= job.status.toLowerCase() %>"><%= job.status %></span></span>
            </div>
        </div>
        
        <div class="job-content">
            <!-- Full-width job description section -->
            <div class="job-section full-width-section">
                <h2>Job Description</h2>
                <p><%= job.jobDescription %></p>
            </div>
            
            <div class="main-content">
                <div class="job-section">
                    <h2>Technologies</h2>
                    <% job.technologies.forEach(tech => { %>
                        <span class="tech-tag"><%= tech %></span>
                    <% }) %>
                </div>
                
                <div class="job-section">
                    <h2>Comments</h2>
                    <% job.comments.forEach(comment => { %>
                        <div class="comment-item">
                            <p><%= comment.content %></p>
                            <small><%= comment.createdAt.toLocaleString() %></small>
                        </div>
                    <% }) %>
                    
                    <h3>Add a Comment</h3>
                    <form id="comment-form">
                        <textarea name="content" rows="4" required style="width: 100%; padding: 10px;"></textarea>
                        <button type="submit" class="btn btn-primary">Add Comment</button>
                    </form>
                </div>
            </div>
            
            <div class="right-panel">
                <div class="job-section">
                    <h2>Actions</h2>
                    <a href="/jobs/<%= job._id %>/edit" class="btn btn-primary">Edit Job</a>
                    <button id="delete-job-btn" class="btn btn-danger">Delete Job</button>
                </div>

                <div class="job-section">
                    <h2>Linked Notes</h2>
                    <div id="linked-notes-chips"></div>
                    <button id="link-notes-btn" class="btn btn-secondary">Link Notes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Replace the noteContentModal with this -->
    <div id="noteContentModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2 id="note-title">Note Content</h2>
            <div id="note-content"></div>
        </div>
    </div>

    <!-- Replace the existing linkNotesModal with this improved version -->
    <div id="linkNotesModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Link Notes</h2>
            <input type="text" id="noteSearchInput" placeholder="Search notes..." style="width: 100%; padding: 10px; margin-bottom: 10px;">
            <select id="availableNotes" multiple style="width: 100%; height: 200px;">
                <!-- Options will be dynamically added here -->
            </select>
            <button id="submitLinkedNotes" class="btn btn-primary" style="margin-top: 10px;">Link Selected Notes</button>
        </div>
    </div>

    <script>
        console.log('Job object:', <%- JSON.stringify(job) %>);
        console.log('Related notes:', <%- JSON.stringify(job.relatedNotes || []) %>);

        function renderLinkedNotesChips() {
            fetch('/jobs/<%= job._id %>/related-notes')
                .then(response => response.json())
                .then(relatedNotes => {
                    const chipsContainer = document.getElementById('linked-notes-chips');
                    if (!chipsContainer) {
                        console.error('Chips container not found');
                        return;
                    }
                    chipsContainer.innerHTML = '';
                    
                    if (relatedNotes.length === 0) {
                        chipsContainer.innerHTML = '<p>No linked notes yet.</p>';
                        return;
                    }

                    relatedNotes.forEach(note => {
                        const chip = document.createElement('span');
                        chip.className = 'note-chip';
                        chip.title = note.content; // Add full content as tooltip
                        chip.innerHTML = `
                            ${note.title || 'Untitled Note'}
                            <span class="unlink-note" data-note-id="${note._id}">&times;</span>
                        `;
                        const unlinkButton = chip.querySelector('.unlink-note');
                        if (unlinkButton) {
                            unlinkButton.addEventListener('click', (e) => {
                                e.stopPropagation();
                                unlinkNote(note._id);
                            });
                        }
                        chip.addEventListener('click', () => openNoteContent(note));
                        chipsContainer.appendChild(chip);
                    });
                })
                .catch(error => console.error('Error fetching related notes:', error));
        }

        // Call renderLinkedNotesChips when the page loads
        document.addEventListener('DOMContentLoaded', renderLinkedNotesChips);

        function openNoteContent(note) {
            const modal = document.getElementById('noteContentModal');
            const titleElement = document.getElementById('note-title');
            const contentElement = document.getElementById('note-content');
            
            modal.style.display = 'block';
            titleElement.textContent = note.title || 'Untitled Note';
            
            // Use DOMPurify to sanitize the HTML content
            contentElement.innerHTML = DOMPurify.sanitize(note.content);
        }

        // Get the modals
        var linkNotesModal = document.getElementById("linkNotesModal");
        var noteContentModal = document.getElementById("noteContentModal");

        // Get the button that opens the link notes modal
        var linkNotesBtn = document.getElementById("link-notes-btn");

        // Get the <span> elements that close the modals
        var spans = document.getElementsByClassName("close");

        // When the user clicks the button, open the link notes modal
        linkNotesBtn.onclick = function() {
            linkNotesModal.style.display = "block";
            fetchAvailableNotes();
        }

        // When the user clicks on <span> (x), close the modals
        for (let span of spans) {
            span.onclick = function() {
                linkNotesModal.style.display = "none";
                noteContentModal.style.display = "none";
            }
        }

        // When the user clicks anywhere outside of the modals, close them
        window.onclick = function(event) {
            if (event.target == linkNotesModal) {
                linkNotesModal.style.display = "none";
            }
            if (event.target == noteContentModal) {
                noteContentModal.style.display = "none";
            }
        }

        function fetchAvailableNotes() {
            fetch('/jobs/<%= job._id %>/available-notes')
                .then(response => response.json())
                .then(notes => {
                    const selectElement = document.getElementById('availableNotes');
                    selectElement.innerHTML = '';
                    notes.forEach(note => {
                        const option = document.createElement('option');
                        option.value = note._id;
                        option.textContent = note.title || 'Untitled Note';
                        selectElement.appendChild(option);
                    });
                })
                .catch(error => console.error('Error fetching available notes:', error));
        }

        document.getElementById('noteSearchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const options = document.getElementById('availableNotes').options;
            for (let i = 0; i < options.length; i++) {
                const optionText = options[i].text.toLowerCase();
                options[i].style.display = optionText.includes(searchTerm) ? '' : 'none';
            }
        });

        document.getElementById('submitLinkedNotes').addEventListener('click', function() {
            const selectedNotes = Array.from(document.getElementById('availableNotes').selectedOptions).map(option => option.value);
            
            fetch('/jobs/link-notes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ jobId: '<%= job._id %>', noteIds: selectedNotes }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    linkNotesModal.style.display = "none";
                    renderLinkedNotesChips();
                } else {
                    throw new Error(data.message || 'Error linking notes');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error linking notes: ' + error.message);
            });
        });

        document.getElementById('comment-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const content = this.content.value;
            fetch('/jobs/<%= job._id %>/comments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ content }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Create new comment element
                    const commentDiv = document.createElement('div');
                    commentDiv.className = 'comment-item';
                    commentDiv.innerHTML = `
                        <p>${escapeHtml(data.comment.content)}</p>
                        <small>${new Date(data.comment.createdAt).toLocaleString()}</small>
                    `;
                    
                    // Add new comment to the list
                    const commentsSection = document.querySelector('.job-section:nth-child(3)');
                    commentsSection.insertBefore(commentDiv, document.getElementById('comment-form'));
                    
                    // Clear the form
                    this.content.value = '';
                } else {
                    throw new Error(data.message || 'Error adding comment');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error adding comment: ' + error.message);
            });
        });

        // Helper function to escape HTML
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        document.getElementById('delete-job-btn').addEventListener('click', function() {
            if (confirm('Are you sure you want to delete this job?')) {
                fetch('/jobs/<%= job._id %>', {
                    method: 'DELETE',
                })
                .then(response => {
                    if (response.ok) {
                        window.location.href = '/jobs';
                    } else {
                        throw new Error('Failed to delete job');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to delete job');
                });
            }
        });

        function unlinkNote(noteId) {
            if (confirm('Are you sure you want to unlink this note?')) {
                fetch('/jobs/<%= job._id %>/unlink-note', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ noteId }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        renderLinkedNotesChips();
                    } else {
                        throw new Error(data.message || 'Error unlinking note');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error unlinking note: ' + error.message);
                });
            }
        }
    </script>
</body>
</html>